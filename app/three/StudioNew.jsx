/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 studio.glb -d -k 
*/
"use client";

import { useState, useRef } from "react";
import * as THREE from "three";
import { useGLTF } from "@react-three/drei";
import { useLoader, useFrame } from "@react-three/fiber";
import { Select, Selection } from "@react-three/postprocessing";

import {
  splatterConfig,
  longSleeveConfig,
  poloConfig,
  hoodieConfig,
} from "./assets/clothingConfig";
import collectionStore from "../stores/collectionStore";

import vertexShader from "./shaders/studio/vertexShader.glsl";
import fragmentShader from "./shaders/studio/fragmentShader.glsl";

export default function StudioNew(props) {
  const { nodes } = useGLTF("/models/studio.glb");
  const bakedFinalTexture = useLoader(
    THREE.TextureLoader,
    "/assets/bakednew.jpg"
  );
  bakedFinalTexture.colorSpace = THREE.SRGBColorSpace;
  bakedFinalTexture.flipY = false;

  const shaderMaterial = new THREE.ShaderMaterial({
    uniforms: {
      uBakedDayTexture: { value: bakedFinalTexture },
    },
    vertexShader,
    fragmentShader,
    side: THREE.DoubleSide,
  });

  const splatterMesh = useRef();
  const longsleeveMesh = useRef();
  const poloMesh = useRef();
  const hoodieMesh = useRef();

  const setProductHandle = collectionStore((state) => state.setProductHandle);
  const setSidebarOpen = collectionStore((state) => state.setSidebarOpen);
  const [hoveredItem, setHoveredItem] = useState({ type: null, id: null });
  const handlePointerOver = (type, id) => {
    setHoveredItem({ type, id });
    document.body.style.cursor = "pointer";
  };

  const handlePointerOut = () => {
    setHoveredItem({ type: null, id: null });
    document.body.style.cursor = "auto";
  };

  const handleCollectionClick = (type) => {
    setProductHandle(type);
    setTimeout(() => {
      setSidebarOpen(true);
    }, 1000);
  };

  const points = [
    {
      position: new THREE.Vector3(0, -1, -3),
      element: document.querySelector(".point-0"),
    },
    {
      position: new THREE.Vector3(-1.2, -1, -1.8),
      element: document.querySelector(".point-1"),
    },
    {
      position: new THREE.Vector3(1.1, -1, -1.8),
      element: document.querySelector(".point-2"),
    },
    {
      position: new THREE.Vector3(1.4, -1, -0.4),
      element: document.querySelector(".point-3"),
    },
  ];

  useFrame(({ camera }) => {
    for (const point of points) {
      const screenPosition = point.position.clone();
      screenPosition.project(camera);

      const translateX = (screenPosition.x * window.innerWidth) / 2;
      const translateY = -(screenPosition.y * window.innerHeight) / 2;

      point.element.style.transform = `translateX(${translateX}px) translateY(${translateY}px)`;
    }
  });

  return (
    <group {...props} dispose={null} rotation={[0, -Math.PI / 2, 0]} layers={1}>
      <mesh
        name="studio"
        geometry={nodes.studio.geometry}
        material={shaderMaterial}
        position={[0, 1.5, 0]}
        castShadow
        receiveShadow
      />
      <Selection>
        <Select enabled={hoveredItem.type === "longsleeve"}>
          <group
            onPointerOver={() => handlePointerOver("longsleeve")}
            onPointerOut={handlePointerOut}
            onClick={() => handleCollectionClick("longsleeve")}
          >
            {longSleeveConfig.map(({ color, position, rotation }, index) => (
              <mesh
                key={index}
                name={`Longsleeve_${color}_High002`}
                geometry={nodes[`Longsleeve_${color}_High002`].geometry}
                material={shaderMaterial}
                position={position}
                rotation={rotation}
                ref={longsleeveMesh}
                castShadow
                receiveShadow
              />
            ))}
          </group>
        </Select>
        <Select enabled={hoveredItem.type === "polo"}>
          <group
            onPointerOver={() => handlePointerOver("polo")}
            onPointerOut={handlePointerOut}
            onClick={() => handleCollectionClick("polo")}
          >
            {poloConfig.map(({ color, position, rotation }, index) => (
              <mesh
                key={index}
                geometry={nodes[`Polo2_${color}_High002`].geometry}
                material={shaderMaterial}
                position={position}
                rotation={rotation}
                ref={poloMesh}
                castShadow
                receiveShadow
              ></mesh>
            ))}
          </group>
        </Select>
        <Select enabled={hoveredItem.type === "splatter"}>
          <group
            onPointerOver={() => handlePointerOver("splatter")}
            onPointerOut={handlePointerOut}
            onClick={() => handleCollectionClick("splatter")}
          >
            {splatterConfig.map(({ color, position, rotation }, index) => (
              <mesh
                key={index}
                geometry={nodes[`Splatter_${color}_High002`].geometry}
                material={shaderMaterial}
                position={position}
                rotation={rotation}
                ref={splatterMesh}
                castShadow
                receiveShadow
              />
            ))}
          </group>
        </Select>
        <Select enabled={hoveredItem.type === "hoodie"}>
          <group
            onPointerOver={() => handlePointerOver("hoodie")}
            onPointerOut={handlePointerOut}
            onClick={() => handleCollectionClick("hoodie")}
          >
            {hoodieConfig.map(({ color, position, rotation }, index) => (
              <mesh
                key={index}
                geometry={nodes[`Hoodie_${color}_High002`].geometry}
                material={shaderMaterial}
                position={position}
                rotation={rotation}
                ref={hoodieMesh}
                castShadow
                receiveShadow
              />
            ))}
          </group>
        </Select>
      </Selection>
    </group>
  );
}

useGLTF.preload("/models/studio.glb");
